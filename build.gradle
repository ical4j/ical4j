plugins {
    id 'java'
    id 'java-library'
    id 'groovy'
    id 'maven-publish'
    id 'jacoco'
    id 'signing'
//    id 'org.hidetake.ssh' version '2.11.2' // errors when using Gradle 8.* with JDK 8
    id "pl.allegro.tech.build.axion-release" version "1.13.6" // errors when using Gradle 8.* with JDK 8 (https://github.com/allegro/axion-release-plugin/issues?q=is%3Aissue+is%3Aopen+%22Gradle+8%22+in%3Atitle)
    id "com.palantir.revapi" version "1.7.0"
//    id "net.ltgt.errorprone" version "2.0.2" apply false
//    id "biz.aQute.bnd.builder" version "$bndVersion"
    id 'org.javamodularity.moduleplugin' version '1.8.14'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

jar {
    duplicatesStrategy = DuplicatesStrategy.WARN
}

java {
    withJavadocJar()
    withSourcesJar()

    registerFeature('jcacheTimezoneCache') {
        usingSourceSet(sourceSets.main)
    }

    registerFeature('filterExpressions') {
        usingSourceSet(sourceSets.main)
    }

    registerFeature('groovyDsl') {
        usingSourceSet(sourceSets.main)
    }

    registerFeature('schemaValidation') {
        usingSourceSet(sourceSets.main)
    }
}

sourcesJar.dependsOn 'compileModuleInfoJava'

dependencies {
//    errorprone "com.google.errorprone:error_prone_core:2.3.3"
//    errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"

    api "org.slf4j:slf4j-api:$slf4jVersion",
            "commons-codec:commons-codec:$commonsCodecVersion",
            "org.apache.commons:commons-lang3:$commonsLangVersion",
            "org.threeten:threeten-extra:$threetenExtraVersion"

//    api ("commons-validator:commons-validator:$commonsValidatorVersion") {
//        exclude group: 'commons-collections', module: 'commons-collections'
//    }

    compileOnly "org.jetbrains:annotations:24.1.0"

    // optional timezone caching..
    jcacheTimezoneCacheImplementation 'javax.cache:cache-api:1.1.1', 'org.jetbrains:annotations:23.0.0'

    // optional parser for filter expressions..
    filterExpressionsImplementation "org.jparsec:jparsec:$jparsecVersion"

    // optional groovy DSL for calendar builder..
    groovyDslImplementation "org.codehaus.groovy:groovy:$groovyVersion"
    //groovyDslImplementation "org.codehaus.groovy:groovy-dateutil:$groovyVersion"

    // optional JSON schema validation for structured-data..
//    schemaValidationImplementation "com.github.erosb:json-sKema:$jsonSkemaVersion"

//    annotationProcessor "biz.aQute.bnd:biz.aQute.bndlib:$bndVersion"

    testImplementation "org.apache.logging.log4j:log4j-core:$log4jVersion",
            "org.apache.logging.log4j:log4j-slf4j2-impl:$log4jVersion",
            "org.ccil.cowan.tagsoup:tagsoup:$tagsoupVersion",
            "org.codehaus.groovy:groovy-xml:$groovyVersion"

    // A CachingProvider is required for TimeZoneCacheTest.groovy
    testImplementation "org.cache2k:cache2k-jcache:$jcacheVersion"

    // groovy-test
    testImplementation "org.codehaus.groovy:groovy-test:$groovyVersion"

    // test dependencies
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVintageVersion"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // spock
    testImplementation platform("org.spockframework:spock-bom:$spockVersion"),
            "org.spockframework:spock-core"

    testImplementation "org.hamcrest:hamcrest-core:$hamcrestVersion"

    // testcontainers
    testImplementation "org.testcontainers:testcontainers:$testcontainersVersion",
            "org.testcontainers:spock:$testcontainersVersion"
}

test {
    moduleOptions {
        runOnClasspath = true
    }

    useJUnitPlatform()

    finalizedBy jacocoTestCoverageVerification, jacocoTestReport // Ensure Jacoco is run after tests have completed

//    jvmArgs = [ "-Duser.timezone=UTC" ] // Some tests require default timezone to be UTC
}

jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                minimum = 0.7
            }
            failOnViolation = false
        }
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = jacoco_htmlReport == 'true'
    }
}

javadoc {
//    options.addBooleanOption('-no-module-directories', true)
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
    options {
        links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
    }
}

scmVersion {
    tag {
        prefix = 'ical4j-'
        branchPrefix = ['ical4j-1.x-maintenance' : 'jdk14_ical4j']
        branchPrefix = ['ical4j-2.x-maintenance' : 'jdk7_ical4j']
    }
    versionCreator 'versionWithBranch'
    branchVersionCreator = ['master': 'simple']
    branchVersionCreator = ['ical4j-1.x-maintenance': 'simple']
    branchVersionCreator = ['ical4j-2.x-maintenance': 'simple']
    branchVersionCreator = ['ical4j-3.x-maintenance': 'simple']
    nextVersion {
        suffix = 'pre'
        separator = '-'
    }
}

group = 'org.mnode.ical4j'
description = '''
A Java library for reading and writing iCalendar (*.ics) files
'''
version = scmVersion.version

jar {
    manifest {
        attributes (
                'Implementation-Title': 'iCal4j',
                'Implementation-Version': version,
                'Implementation-Vendor': 'Ben Fortuna'
        )
    }
}

revapi {
    oldVersion = revApiOldVersion
}

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

publishing {
    publications {
        ical4j(MavenPublication) {
            from components.java
            pom.withXml {
                asNode().appendNode('name', project.name)
                asNode().appendNode('description', project.description)
                asNode().appendNode('url', 'http://ical4j.github.io')

                def scmNode = asNode().appendNode('scm')
                scmNode.appendNode('url', 'https://github.com/ical4j/ical4j')
                scmNode.appendNode('connection', 'scm:git@github.com:ical4j/ical4j.git')
                scmNode.appendNode('developerConnection', 'scm:git@github.com:ical4j/ical4j.git')

                def licenseNode = asNode().appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'BSD-3-Clause')
                licenseNode.appendNode('url', 'https://raw.githubusercontent.com/ical4j/ical4j/master/LICENSE.txt')
                licenseNode.appendNode('distribution', 'repo')

                def developerNode = asNode().appendNode('developers').appendNode('developer')
                developerNode.appendNode('id', 'fortuna')
                developerNode.appendNode('name', 'Ben Fortuna')
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            url = !isReleaseVersion ? "https://oss.sonatype.org/content/repositories/snapshots/" : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
//        maven {
//            name = "GitHubPackages"
//            url = uri("https://maven.pkg.github.com/ical4j/ical4j")
//            credentials {
//                username = System.getenv("GPR_USERNAME")
//                password = System.getenv("GPR_TOKEN")
//            }
//        }
    }
}

signing {
    required { isReleaseVersion }
    sign publishing.publications.ical4j
}

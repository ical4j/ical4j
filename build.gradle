buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath group: 'pl.allegro.tech.build', name: 'axion-release-plugin', version: '1.4.0'
        classpath 'org.hidetake:gradle-ssh-plugin:1.1.3'
    }
}

plugins {
  id "org.sonarqube" version "1.2"
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'osgi'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'signing'
apply plugin: 'pl.allegro.tech.build.axion-release'
apply from: 'gradle/dist.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

/*
githubPages {
//    repoUri = 'https://github.com/ical4j/ical4j.github.io.git'
    repoUri = 'git@github.com:ical4j/ical4j.github.io.git'
    pages {
        from javadoc.outputs.files
    }
}
*/
/*
github {
    /* Wiki repo will be calculated from this. *
    repo = 'git@github.com:ical4j/ical4j.git'

    wiki {
        /*
        This is the same as used in Gradle Copy Task.
        Please refer to Gradle documentation for information.
        *
        from javadoc.outputs.files {
            into 'ical4j/javadoc'
        }
        into { "javadoc/$project.release.version" }
    }
}
*/

repositories {
    mavenCentral()
}

ext {
    slf4jVersion = '1.7.10'
}

dependencies {
    compile "org.slf4j:slf4j-api:$slf4jVersion",
            'commons-codec:commons-codec:1.9',
            'org.apache.commons:commons-lang3:3.3.2',
            'org.apache.commons:commons-collections4:4.0',
            'org.codehaus.groovy:groovy-all:2.3.2',
            'biz.aQute.bnd:bndlib:2.3.0'

    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0',
            'commons-io:commons-io:2.4',
            'org.ccil.cowan.tagsoup:tagsoup:1.2.1',
            "org.slf4j:slf4j-log4j12:$slf4jVersion"
}

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

scmVersion {
    tag {
        prefix = 'ical4j'
    }
    versionCreator 'versionWithBranch'
    branchVersionCreator = [
        'release/.*': 'simple'
    ]
}

group = 'org.mnode.ical4j'
version = scmVersion.version
description = '''
A Java library for reading and writing iCalendar (*.ics) files
'''

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")

    // sonatype credentials
    sonatypeUsername = project.hasProperty('sonatypeUsername') ? project.getProperty('sonatypeUsername') : ''
    sonatypePassword = project.hasProperty('sonatypePassword') ? project.getProperty('sonatypePassword') : ''
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name project.name
                packaging 'jar'
                description project.description
                url 'http://ical4j.sourceforge.net'

                scm {
                    url 'https://github.com/ical4j/ical4j'
                    connection 'scm:git@github.com:ical4j/ical4j.git'
                    developerConnection 'scm:git@github.com:ical4j/ical4j.git'
                }

                licenses {
                    license {
                        name 'iCal4j - License'
                        url 'https://raw.githubusercontent.com/ical4j/ical4j/master/LICENSE'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'fortuna'
                        name 'Ben Fortuna'
                    }
                }
            }
        }
    }
}
